from DataGather import *
from telegram import Update
from telegram.ext import Updater
from telegram.ext import CallbackContext
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram import KeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
from pycoingecko import CoinGeckoAPI
from py_currency_converter import convert
import telebot
import pandas as pd
import requests
from time import sleep



#–ë–õ–û–ö –î–õ–Ø –î–ê–ù–ù–´–• ETC

import pandas as pd
import requests
from time import sleep
apiKey='N1N1GTP4FI9Y63SL'
interval_var = '1min'
symbol = 'ETH'

# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key
path = 'https://www.alphavantage.co/query?function=CRYPTO_INTRADAY&symbol='+symbol+'&market=USD&interval='+interval_var+'&apikey='+apiKey+'&datatype=csv'
#############################

cg = CoinGeckoAPI()

view = "COIN"
usd = 'COST'
ablockchain = 'BOT'
monitoringhigh= 'MAX ETH'
monitoringlow = 'MIN ETH'
monitoringopen = 'OPEN ETH'
monitoringclose='–°LOSE ETH'
monitoringvolume = 'VOL ETH'

# –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞
def button_view_handler(update: Update, context: CallbackContext):
    price = cg.get_price(ids='bitcoin,litecoin,ethereum,solana,polygon,fantom,dogecoin,polkadot', vs_currencies='usd')
    update.message.reply_text(
        text=f"Bitcoin $ {price['bitcoin']['usd']:.2f}"
        + f"\nLitecoin $ {price['litecoin']['usd']:.2f}"
        + f"\nEthereum $ {price['ethereum']['usd']:.2f}"
        + f"\nSolana $ {price['solana']['usd']:.2f}"
        + f"\nFantom $ {price['fantom']['usd']:.2f}"
        + f"\nDogecoin $ {price['dogecoin']['usd']:.2f}"
        + f"\nPolkadot $ {price['polkadot']['usd']:.2f}"
        )

# –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è
def button_ablockchain_handler(update: Update, context: CallbackContext):
    update.message.reply_text(
    text='–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∞–∫—Ü–∏—è–º–∏ –∏–ª–∏ –Ω–µ—Ñ—Ç–∏ –∏ –∑–æ–ª–æ—Ç–∞'
         '\n—á—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç? - '
         '\n1.–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —Å –±–∏—Ä–∂–∏ Binance'
         '\n, –∞ —Ç–∞–∫–∂–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'
         '\n2.–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è '
         '\n3.–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫ –±–∏—Ä–∂–µ Binance –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π'
         '\n4.–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã'
         '\n–°–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä—É —Ä–µ—à–∏—Ç—å, –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –≤ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫,'
         '\n–∏—Å—Ö–æ–¥—è –∏–∑ —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–∏'
         '\n–¶–ï–ù–ê:80$USD'
         '\n–ü–†–û–î–ê–í–ï–¶:https://t.me/Hokage17th'
    )

# –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ min
def button_monitoringlow_handler(update: Update, context: CallbackContext):
    df = pd.read_csv(path)
    df = df[::-1].reset_index()
    df = df.drop(['index'], axis=1)
    df = df[{'low','timestamp'}]
    print(df)
    update.message.reply_text(
        text=f"{df}"
    )

# –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ open
def button_monitoringopen_handler(update: Update, context: CallbackContext):
    df = pd.read_csv(path)
    df = df[::-1].reset_index()
    df = df.drop(['index'], axis=1)
    df = df[{'open','timestamp'}]
    print(df)
    update.message.reply_text(
        text=f"{df}"
    )


## –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ close

def button_monitoringclose_handler(update: Update, context: CallbackContext):
    df = pd.read_csv(path)
    df = df[::-1].reset_index()
    df = df.drop(['index'], axis=1)
    df = df[{'close','timestamp'}]
    print(df)
    update.message.reply_text(
        text=f"{df}"
    )

# –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ max

def button_monitoringhigh_handler(update: Update, context: CallbackContext):
    df = pd.read_csv(path)
    df = df[::-1].reset_index()
    df = df.drop(['index'], axis=1)
    df = df[{'high','timestamp'}]
    print(df)
    update.message.reply_text(
        text=f"{df}"
    )



# –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ vol
def button_monitoringvolume_handler(update: Update, context: CallbackContext):
    df = pd.read_csv(path)
    df = df[::-1].reset_index()
    df = df.drop(['index'], axis=1)
    df = df[{'volume','timestamp','open'}]
    print(df)
    update.message.reply_text(
        text=f"{df}"
    )


# –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def button_usd_handler(update: Update, context: CallbackContext):
    course = convert(amount=1, to=['RUB', 'EUR', 'UAH'])
    update.message.reply_text(
        text=f"1 USD to RUB {course['RUB']}"
        + f"\n1 USD to EUR {course['EUR']}"
        + f"\n1 USD to UAH {course['UAH']}"
    )
# –ü–û–ñ–ê–õ–£–ô–°–¢–ê, –ü–û–î–ü–ò–®–ò–¢–ï–°–¨ –ù–ê –ö–ê–ù–ê–õ aBlockchain - –°–ø–∞—Å–∏–±–æ!
def message_handler(update: Update, context: CallbackContext):
    text = update.message.text
    if text == view:
        return button_view_handler(update=update, context=context)
    elif text == usd:
        return button_usd_handler(update=update, context=context)
    elif text == ablockchain:
        return button_ablockchain_handler(update=update, context=context)
    elif text == monitoringopen:
        return button_monitoringopen_handler(update=update, context=context)
    elif text == monitoringhigh:
        return button_monitoringhigh_handler(update=update, context=context)
    elif text == monitoringlow:
        return button_monitoringlow_handler(update=update, context=context)
    elif text == monitoringvolume:
        return button_monitoringvolume_handler(update=update, context=context)
    elif text == monitoringclose:
        return button_monitoringclose_handler(update=update, context=context)

    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [
            KeyboardButton(text=view),
            KeyboardButton(text=usd),
            KeyboardButton(text=ablockchain),
            KeyboardButton(text=monitoringopen),
            KeyboardButton(text=monitoringhigh),
            KeyboardButton(text=monitoringlow),
            KeyboardButton(text=monitoringvolume),
            KeyboardButton(text=monitoringclose)
            ],
        ],
        resize_keyboard=True,
    )
    update.message.reply_text(
        text='–ü—Ä–∏–≤–µ—Ç! üëã ETH –Ω–∞ —Å–≤—è–∑–∏ üöÄ'
             '\nüö®–ë–æ—Ç –¥–∞—ë—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤—ã—Å–æ–∫–∏–º –∏ –Ω–∏–∑–∫–∏–º —Ç–æ—á–∫–∞–º ETH'
             '\n–≠—Ç–æ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—è —Å –∏–Ω—Ñ–æ–π, —á—Ç–æ–±—ã –ø—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç'
             '\n–ï—Å–ª–∏ —Ç–µ–±–µ —Å–ª–∏—à–∫–æ–º –ª–µ–Ω—å –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤–æ –≤—Å–µ –ø—Ä–µ–ª–µ—Å—Ç–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞'
             '\n–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ short –∏ long, —Ç–æ –µ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç,'
             '\n–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ —ç—Ç–æ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.'
             '\n–Ω–∞–∂–∏–º–∞–π –Ω–∞ –º–µ–Ω—é –∏ —Å–º–æ—Ç—Ä–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç–µ'
             '\nüí∏ –ü–û–ö–£–ü–ö–ê PRO –°–ö–†–ò–ü–¢–ê: https://t.me/Hokage17th'
             '\nü™ô BTC BOT:@btc_sig_bot'
             '\nü™ô SOL BOT:@solana_signals_bot'
             '\nü™ô DOGE BOT:@doge_signals_bot',
        reply_markup=reply_markup,
    )

def main():
    print('Start')
    updater = Updater(
    token='5263904902:AAHXgZuFT34WbMjayPwFjVWp-PCaKvzFSTA',
    use_context=True,
    )
    updater.dispatcher.add_handler(MessageHandler(filters=Filters.all, callback=message_handler))
    updater.start_polling()
    updater.idle()
if __name__=='__main__':
    main()